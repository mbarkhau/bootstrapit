# Helpful Links

# http://clarkgrubb.com/makefile-style-guide
# https://explainshell.com
# https://stackoverflow.com/questions/448910
# https://shiroyasha.svbtle.com/escape-sequences-a-quick-guide-1

MAKEFLAGS += --warn-undefined-variables
SHELL := /bin/bash
.SHELLFLAGS := -O extglob -eo pipefail -c
.DEFAULT_GOAL := help
.SUFFIXES:

-include makefile.config.make

PROJECT_DIR := $(notdir $(abspath .))

ifndef MODULE_SRC_PATH
	MODULE_SRC_PATH := $(notdir $(abspath .))
endif

ifndef DEVELOPMENT_PYTHON_VERSION
	DEVELOPMENT_PYTHON_VERSION := python=3.6
endif

ifndef SUPPORTED_PYTHON_VERSIONS
	SUPPORTED_PYTHON_VERSIONS := $(DEVELOPMENT_PYTHON_VERSION)
endif

PKG_NAME := $(PACKAGE_NAME)
SRC_PATH = src/

# TODO (mb 2018-09-23): Support for bash on windows
# 	perhaps we need to install conda using this
# 	https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe
PLATFORM = $(shell uname -s)

# miniconda is shared between projects
CONDA_ROOT := $(HOME)/miniconda3
CONDA_BIN := $(CONDA_ROOT)/bin/conda

ENV_PREFIX := $(CONDA_ROOT)/envs

DEV_ENV_NAME := \
	$(subst py,$(PKG_NAME)_py,$(subst .,,$(subst =,,$(subst thon,,$(DEVELOPMENT_PYTHON_VERSION)))))

CONDA_ENV_NAMES := \
	$(subst py,$(PKG_NAME)_py,$(subst .,,$(subst =,,$(subst thon,,$(SUPPORTED_PYTHON_VERSIONS)))))

CONDA_ENV_PATHS := \
	$(subst py,${ENV_PREFIX}/$(PKG_NAME)_py,$(subst .,,$(subst =,,$(subst thon,,$(SUPPORTED_PYTHON_VERSIONS)))))


DEV_ENV := $(ENV_PREFIX)/$(DEV_ENV_NAME)
DEV_ENV_PY := $(DEV_ENV)/bin/python

# TODO (mb 2018-09-27): download
#	scripts/setup_conda_envs.sh

PYENV37 := $(CONDA_ROOT)/envs/$(PKG_NAME)_py37
PYENV36 := $(CONDA_ROOT)/envs/$(PKG_NAME)_py36
PYTHON37 := $(PYENV37)/bin/python
PYTHON36 := $(PYENV36)/bin/python

# default version for development
PYENV = $(PYENV36)
PYTHON = $(PYTHON36)


build/envs.txt: requirements/conda.txt
	@mkdir -p build/

	@if [[ ! -f $(CONDA_BIN) ]] && [[ $(PLATFORM) == "Linux" ]]; then \
		echo "installing miniconda ..."; \
		wget "https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh" \
			-O build/miniconda3.sh; \
	fi
	@if [[ ! -f $(CONDA_BIN) ]] && [[ $(PLATFORM) == "MINGW64_NT-10.0" ]]; then \
		curl "https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh" \
			-O build/miniconda3.sh; \
	fi
	@if [[ ! -f $(CONDA_BIN) ]] && [[ $(PLATFORM) == "Darwin" ]]; then \
		wget "https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" \
			-O build/miniconda3.sh; \
	fi

	@if [[ ! -f $(CONDA_BIN) ]]; then \
		bash build/miniconda3.sh -b -p $(CONDA_ROOT); \
		rm build/miniconda3.sh; \
	fi

	rm -f build/envs.txt.tmp;

	@SUPPORTED_PYTHON_VERSIONS="$(SUPPORTED_PYTHON_VERSIONS)" \
		CONDA_ENV_NAMES="$(CONDA_ENV_NAMES)" \
		CONDA_ENV_PATHS="$(CONDA_ENV_PATHS)" \
		CONDA_BIN="$(CONDA_BIN)" \
		bash scripts/setup_conda_envs.sh;

	$(CONDA_BIN) env list \
		| grep $(PKG_NAME) \
		| rev | cut -d " " -f1 \
		| rev | sort >> build/envs.txt.tmp;

	mv build/envs.txt.tmp build/envs.txt;


build/deps.txt: build/envs.txt requirements/*.txt
	@mkdir -p build/

	@SUPPORTED_PYTHON_VERSIONS="$(SUPPORTED_PYTHON_VERSIONS)" \
		CONDA_ENV_NAMES="$(CONDA_ENV_NAMES)" \
		CONDA_ENV_PATHS="$(CONDA_ENV_PATHS)" \
		CONDA_BIN="$(CONDA_BIN)" \
		bash scripts/update_conda_env_deps.sh;

	@echo "updating $(DEV_ENV_NAME) development deps ...";

	@$(DEV_ENV_PY) -m pip install \
		--disable-pip-version-check --upgrade \
		--requirement=requirements/integration.txt;

	@$(DEV_ENV_PY) -m pip install \
		--disable-pip-version-check --upgrade \
		--requirement=requirements/development.txt;

	@echo "updating local vendor dep copies ...";

	@$(DEV_ENV_PY) -m pip install \
		--upgrade --disable-pip-version-check \
		--no-deps --target=./vendor \
		--requirement=requirements/vendor.txt;

	@rm -f build/deps.txt.tmp;

	@for env_name in $(CONDA_ENV_NAMES); do \
		env_py="${ENV_PREFIX}/$${env_name}/bin/python"; \
		printf "\npip freeze for $${env_name}:\n" >> build/deps.txt.tmp; \
		$${env_py} -m pip freeze >> build/deps.txt.tmp; \
		printf "\n\n" >> build/deps.txt.tmp; \
	done

	@mv build/deps.txt.tmp build/deps.txt


## This help message
.PHONY: help
help:
	@printf "Available make targets for \033[97m$(PKG_NAME)\033[0m:\n"

	@grep -hzoP '\n(\n##.*?)+\n(\.PHONY: [a-zA-Z_-]+)?' $(MAKEFILE_LIST) \
		| sed -zr "s/\n\n##([^\n]*)\n/\n-INIT-\1-NL-/g" \
		| sed -zr "s/##([^\n]*)\n/\1-NL-/g" \
		| sed -zr "s/\.PHONY: ([^\n]+)/-FS-\1/g" \
		| awk -F"-FS-" '{ printf "    \033[36m%-12s\033[0m %s\n", $$2, $$1 }' \
		| sed -z "s/-INIT-//g" \
		| sed -z "s/-NL-[^\n]/\n                  /g" \
		| sed -z "s/-NL-//g"

	@echo ""

	@if [[ ! -f $(DEV_ENV_PY) ]]; then \
	echo "Missing python interpreter at $(DEV_ENV_PY) !"; \
	echo "You problably want to install first:"; \
	echo ""; \
	echo "    make install"; \
	echo ""; \
	exit 0; \
	fi

	@if [[ ! -f $(CONDA_BIN) ]]; then \
	echo "No conda installation found!"; \
	echo "You problably want to install first:"; \
	echo ""; \
	echo "    make install"; \
	echo ""; \
	exit 0; \
	fi


## -- Project Setup --


## Delete conda envs and cache üí©
.PHONY: clean
clean:
	@if test -f $(PYTHON37); then \
	$(CONDA_BIN) env remove --name $(PKG_NAME)_py37 --yes; \
	fi

	@if test -f $(PYTHON36); then \
	$(CONDA_BIN) env remove --name $(PKG_NAME)_py36 --yes; \
	fi

	rm -f build/envs.txt
	rm -f build/deps.txt
	rm -rf vendor/
	rm -rf .mypy_cache/
	rm -rf .pytest_cache/
	rm -rf __pycache__/
	rm -rf src/__pycache__/
	rm -rf vendor/__pycache__/
	@printf "\n setup/update completed  ‚ú® üç∞ ‚ú® \n\n"


## Setup python virtual environments
.PHONY: install
install: build/deps.txt


## Update dependencies (pip install -U ...)
.PHONY: update
update: build/deps.txt


## TODO: Install git pre-push hooks
.PHONY: git_hooks
git_hooks:
	@rm -f ${PWD}/.git/hooks/pre-push
	ln -s ${PWD}/scripts/pre-push-hook.sh ${PWD}/.git/hooks/pre-push


# TODO make target to publish on pypi

# .PHONY: publish
# publish:
# 	echo "Not Implemented"

## -- Development --


## Run code formatter on src/ and test/
.PHONY: fmt
fmt:
	@$(DEV_ENV)/bin/sjfmt --py36 --skip-string-normalization --line-length=100 \
		 $(SRC_PATH)*.py $(SRC_PATH)*/*.py test/*.py


# TODO: add linting for .md files using readme_renderer

## Run flake8 linter and mypy type checker
.PHONY: lint
lint:
	@printf "flake8 ..\n"
	@$(DEV_ENV)/bin/flake8 $(SRC_PATH)
	@printf "\e[1F\e[9C ok\n"

	@printf "mypy ....\n"
	@MYPYPATH=stubs/:vendor/ $(DEV_ENV_PY) -m mypy $(SRC_PATH)
	@printf "\e[1F\e[9C ok\n"

	@printf "docs ....\n"
	@printf "\e[1F\e[9C NA\n"


## Run pytest unit and integration tests
.PHONY: test
test:
	ENV=dev PYTHONPATH=src/:vendor/:$$PYTHONPATH \
		$(DEV_ENV_PY) -m pytest -v \
		--doctest-modules \
		--cov-report html \
		--cov-report term \
		--cov=$(PKG_NAME) \
		test/ src/


## -- Helpers --


## Drop into an ipython shell with correct env variables set
.PHONY: ipy
ipy:
	@PYTHONPATH=src/:vendor/:$$PYTHONPATH \
		$(DEV_ENV)/bin/ipython


## like `make test`, but with debug parameters
.PHONY: devtest
devtest:
	ENV=dev PYTHONPATH=src/:vendor/:$$PYTHONPATH \
		$(DEV_ENV_PY) -m pytest -v \
		--doctest-modules \
		--cov-report term \
		--cov=$(PKG_NAME) \
		--verbose \
		--capture=no \
		--exitfirst \
		test/ src/


-include makefile.extra.make
